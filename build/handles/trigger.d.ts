/** @noSelfInFile **/
/// <reference types="war3-types/core/common" />
import { UnitId } from '../common';
import { Dialog, DialogButton } from './dialog';
import { Frame } from './frame';
import { Handle } from './handle';
import { MapPlayer } from './player';
import { Unit } from './unit';
import { Widget } from './widget';
export declare class Trigger extends Handle<trigger> {
    constructor();
    set enabled(flag: boolean);
    get enabled(): boolean;
    get evalCount(): number;
    static get eventId(): eventid;
    get execCount(): number;
    set waitOnSleeps(flag: boolean);
    get waitOnSleeps(): boolean;
    addAction(actionFunc: () => void): triggeraction;
    addCondition(condition: () => boolean): triggercondition;
    destroy(): void;
    eval(): boolean;
    exec(): void;
    registerAnyUnitEvent(whichPlayerUnitEvent: playerunitevent): Trigger;
    registerCommandEvent(whichAbility: number, order: string): Trigger;
    registerDeathEvent(whichWidget: Widget): Trigger;
    registerDialogButtonEvent(whichButton: DialogButton): Trigger;
    registerDialogEvent(whichDialog: Dialog): Trigger;
    registerEnterRegion(whichRegion: region, filter: (() => boolean) | null): Trigger;
    registerFilterUnitEvent(whichUnit: unit, whichEvent: unitevent, filter: (() => boolean) | null): Trigger;
    registerGameEvent(whichGameEvent: gameevent): Trigger;
    registerGameStateEvent(whichState: gamestate, opcode: limitop, limitval: number): Trigger;
    registerLeaveRegion(whichRegion: region, filter: (() => boolean) | null): Trigger;
    registerPlayerAllianceChange(whichPlayer: MapPlayer, whichAlliance: alliancetype): Trigger;
    registerPlayerChatEvent(whichPlayer: MapPlayer, chatMessageToDetect: string, exactMatchOnly: boolean): Trigger;
    registerPlayerEvent(whichPlayer: MapPlayer, whichPlayerEvent: playerevent): Trigger;
    registerPlayerKeyEvent(whichPlayer: MapPlayer, whichKey: oskeytype, metaKey: number, fireOnKeyDown: boolean): Trigger;
    registerPlayerMouseEvent(whichPlayer: MapPlayer, whichMouseEvent: number): Trigger;
    registerPlayerStateEvent(whichPlayer: MapPlayer, whichState: playerstate, opcode: limitop, limitval: number): Trigger;
    registerPlayerSyncEvent(whichPlayer: MapPlayer, prefix: string, fromServer: boolean): Trigger;
    registerPlayerUnitEvent(whichPlayer: MapPlayer, whichPlayerUnitEvent: playerunitevent, filter: (() => boolean) | null): Trigger;
    registerTimerEvent(timeout: number, periodic: boolean): Trigger;
    registerTimerExpireEvent(t: timer): Trigger;
    registerTrackableHitEvent(whichTrackable: trackable): Trigger;
    registerTrackableTrackEvent(whichTrackable: trackable): Trigger;
    registerUnitEvent(whichUnit: Unit, whichEvent: unitevent): Trigger;
    registerUnitInRange(whichUnit: Unit, range: number, filter?: () => boolean): Trigger;
    registerUnitStateEvent(whichUnit: Unit, whichState: unitstate, opcode: limitop, limitval: number): Trigger;
    registerUpgradeCommandEvent(whichUpgrade: number): Trigger;
    registerVariableEvent(varName: string, opcode: limitop, limitval: number): Trigger;
    registerBuildCommandEvent(unitId: UnitId): this;
    removeAction(whichAction: triggeraction): void;
    removeActions(): void;
    removeCondition(whichCondition: triggercondition): void;
    removeConditions(): void;
    reset(): void;
    triggerRegisterFrameEvent(frame: Frame, eventId: frameeventtype): Trigger;
    static fromEvent(): Trigger;
    static fromHandle(handle: trigger): Trigger;
}
