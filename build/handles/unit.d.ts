/** @noSelfInFile **/
/// <reference types="war3-types/core/common" />
import { AbilId, AttackType, DamageType, ItemId, UnitId, WeaponSound } from '../common';
import { Angle, Vec2 } from '../math/index';
import { Destructable } from './destructable';
import { Force } from './force';
import { Group } from './group';
import { Item } from './item';
import { MapPlayer } from './player';
import { Sound } from './sound';
import { Widget } from './widget';
export declare class Unit extends Widget {
    readonly handle: unit;
    constructor(owner: MapPlayer | number, unitId: UnitId, pos: Vec2, face?: Angle, skinId?: number);
    set acquireRange(value: number);
    get acquireRange(): number;
    get agility(): number;
    set agility(value: number);
    get armor(): number;
    set armor(armorAmount: number);
    set canSleep(flag: boolean);
    get canSleep(): boolean;
    get collisionSize(): number;
    set color(whichColor: playercolor);
    get currentOrder(): number;
    get defaultAcquireRange(): number;
    get defaultFlyHeight(): number;
    get defaultMoveSpeed(): number;
    get defaultPropWindow(): number;
    get defaultTurnSpeed(): number;
    get experience(): number;
    set experience(newXpVal: number);
    set facing(value: Angle);
    get facing(): Angle;
    get foodMade(): number;
    get foodUsed(): number;
    get ignoreAlarmToggled(): boolean;
    get intelligence(): number;
    set intelligence(value: number);
    get inventorySize(): number;
    set invulnerable(flag: boolean);
    get invulnerable(): boolean;
    get level(): number;
    get localZ(): number;
    get mana(): number;
    set mana(value: number);
    get maxLife(): number;
    set maxLife(value: number);
    get maxMana(): number;
    set maxMana(value: number);
    set moveSpeed(value: number);
    get moveSpeed(): number;
    get name(): string;
    set name(value: string);
    set nameProper(value: string);
    get nameProper(): string;
    set owner(whichPlayer: MapPlayer);
    get owner(): MapPlayer;
    set paused(flag: boolean);
    get paused(): boolean;
    get pos(): Vec2;
    set pos(value: Vec2);
    get pointValue(): number;
    set propWindow(value: number);
    get propWindow(): number;
    get race(): race;
    get rallyDestructable(): Destructable;
    get rallyPoint(): Vec2;
    get rallyUnit(): Unit;
    set resourceAmount(amount: number);
    get resourceAmount(): number;
    get selectable(): boolean;
    set selectionScale(scale: number);
    get selectionScale(): number;
    set show(flag: boolean);
    get show(): boolean;
    get skin(): number;
    set skin(skinId: number);
    get skillPoints(): number;
    set skillPoints(skillPointDelta: number);
    get sleeping(): boolean;
    get strength(): number;
    set strength(value: number);
    set turnSpeed(value: number);
    get turnSpeed(): number;
    get typeId(): UnitId;
    get userData(): number;
    set userData(value: number);
    set waygateActive(flag: boolean);
    get waygateActive(): boolean;
    get x(): number;
    set x(value: number);
    get y(): number;
    set y(value: number);
    get z(): number;
    get mineGold(): number;
    set mineGold(value: number);
    addAbility(abilityId: AbilId): boolean;
    addAnimationProps(animProperties: string, add: boolean): void;
    addExperience(xpToAdd: number, showEyeCandy: boolean): void;
    addIndicator(red: number, blue: number, green: number, alpha: number): void;
    addItem(whichItem: Item): boolean;
    addItemById(itemId: ItemId): Item;
    addItemToSlotById(itemId: ItemId, itemSlot: number): boolean;
    addItemToStock(itemId: ItemId, currentStock: number, stockMax: number): void;
    addResourceAmount(amount: number): void;
    addSleepPerm(add: boolean): void;
    addType(whichUnitType: unittype): boolean;
    addUnitToStock(unitId: UnitId, currentStock: number, stockMax: number): void;
    applyTimedLife(buffId: AbilId, duration: number): void;
    attachSound(sound: Sound): void;
    cancelTimedLife(): void;
    canSleepPerm(): boolean;
    countBuffs(removePositive: boolean, removeNegative: boolean, magic: boolean, physical: boolean, timedLife: boolean, aura: boolean, autoDispel: boolean): number;
    damageAt(delay: number, radius: number, x: number, y: number, amount: number, attack: boolean, ranged: boolean, attackType: AttackType, damageType: DamageType, weaponSound?: WeaponSound): boolean;
    damageTarget(target: Widget, amount: number, attack: boolean, ranged: boolean, attackType: AttackType, damageType: DamageType, weaponSound?: WeaponSound): boolean;
    decAbilityLevel(abilId: AbilId): number;
    destroy(): void;
    disableAbility(abilId: AbilId, hideUI: boolean): void;
    dropItem(whichItem: Item, pos: Vec2): boolean;
    putItemInSlot(whichItem: Item, slot: number): boolean;
    dropItemTarget(whichItem: Item, target: Widget): boolean;
    endAbilityCooldown(abilId: AbilId): void;
    getAbility(abilId: AbilId): ability;
    getAbilityByIndex(index: number): ability;
    getAbilityCooldown(abilId: AbilId, level: number): number;
    getAbilityCooldownRemaining(abilId: AbilId): number;
    getAbilityLevel(abilId: AbilId): number;
    getAbilityManaCost(abilId: AbilId, level: number): number;
    getAgility(includeBonuses: boolean): number;
    getAttackCooldown(weaponIndex: number): number;
    getBaseDamage(weaponIndex: number): number;
    getDiceNumber(weaponIndex: number): number;
    getDiceSides(weaponIndex: number): number;
    getIntegerField(field: unitintegerfield): number;
    getField(field: unitbooleanfield | unitintegerfield | unitrealfield | unitstringfield): string | number | boolean;
    getWeaponRealField(field: unitweaponrealfield, index: number): number;
    getWeaponIntegerField(field: unitweaponintegerfield, index: number): number;
    getWeaponBoolField(field: unitweaponbooleanfield, index: number): boolean;
    getWeaponStringField(field: unitweaponstringfield, index: number): string;
    getflyHeight(): number;
    getHeroLevel(): number;
    getIgnoreAlarm(flag: boolean): boolean;
    getIntelligence(includeBonuses: boolean): number;
    getItemInSlot(slot: number): Item | undefined;
    getState(whichUnitState: unitstate): number;
    getStrength(includeBonuses: boolean): number;
    hasBuffs(removePositive: boolean, removeNegative: boolean, magic: boolean, physical: boolean, timedLife: boolean, aura: boolean, autoDispel: boolean): boolean;
    hasBuff(buffId: AbilId): boolean;
    get items(): Item[];
    hasItem(whichItem: Item): boolean;
    getInventorySlotOfItemType(whichItemType: ItemId): number;
    getInventorySlotOfItem(whichItem: Item): number;
    hasItemOfType(whichItemType: ItemId): boolean;
    hideAbility(abilId: AbilId, flag: boolean): void;
    incAbilityLevel(abilId: AbilId): number;
    inForce(whichForce: Force): boolean;
    inGroup(whichGroup: Group): boolean;
    inRange(pos: Vec2, distance: number): boolean;
    inRangeOfUnit(otherUnit: Unit, distance: number): boolean;
    interruptAttack(): void;
    inTransport(whichTransport: Unit): boolean;
    isAlive(): boolean;
    isAlly(whichPlayer: MapPlayer): boolean;
    isEnemy(whichPlayer: MapPlayer): boolean;
    isExperienceSuspended(): boolean;
    isFogged(whichPlayer: MapPlayer): boolean;
    isHero(): boolean;
    isIllusion(): boolean;
    isLoaded(): boolean;
    isMasked(whichPlayer: MapPlayer): boolean;
    isSelected(whichPlayer: MapPlayer): boolean;
    issueBuildOrder(unit: string | UnitId, pos: Vec2): boolean;
    issueImmediateOrder(order: string | number): boolean;
    issueInstantOrderAt(order: string | number, x: number, y: number, instantTargetWidget: Widget): boolean;
    issueInstantTargetOrder(order: string | number, targetWidget: Widget, instantTargetWidget: Widget): boolean;
    issueOrderAt(order: string | number, pos: Vec2): boolean;
    issueTargetOrder(order: string | number, targetWidget: Widget): boolean;
    issueTrainOrder(unitId: UnitId): boolean;
    issueResearchOrder(researchId: number): boolean;
    issueUpgradeOrder(unitId: UnitId): boolean;
    isUnit(whichSpecifiedUnit: Unit): boolean;
    isUnitType(whichUnitType: unittype): boolean;
    isVisible(whichPlayer: MapPlayer): boolean;
    kill(): void;
    lookAt(whichBone: string, lookAtTarget: Unit, offsetX: number, offsetY: number, offsetZ: number): void;
    makeAbilityPermanent(permanent: boolean, abilityId: AbilId): void;
    modifySkillPoints(skillPointDelta: number): boolean;
    pauseEx(flag: boolean): void;
    pauseTimedLife(flag: boolean): void;
    queueAnimation(whichAnimation: string): void;
    recycleGuardPosition(): void;
    removeAbility(abilityId: AbilId): boolean;
    removeBuffs(removePositive: boolean, removeNegative: boolean): void;
    removeBuffsEx(removePositive: boolean, removeNegative: boolean, magic: boolean, physical: boolean, timedLife: boolean, aura: boolean, autoDispel: boolean): void;
    removeGuardPosition(): void;
    dropItemInstantly(whichItem: Item): void;
    dropItemInstantlyFromSlot(itemSlot: number): item;
    removeItemFromStock(itemId: ItemId): void;
    removeType(whichUnitType: unittype): boolean;
    removeUnitFromStock(itemId: UnitId): void;
    /**
     * Replace this unit with a new one of the given type. Returns the new unit.
     */
    replaceWith(unitId: UnitId, state: Unit.ReplaceState): Unit;
    resetCooldown(): void;
    resetLookAt(): void;
    revive(pos: Vec2, doEyecandy: boolean): boolean;
    select(flag: boolean): void;
    selectSkill(abilCode: number): void;
    setAbilityCooldown(abilId: AbilId, level: number, cooldown: number): void;
    setAbilityLevel(abilId: AbilId, level: number): number;
    setAbilityManaCost(abilId: AbilId, level: number, manaCost: number): void;
    setAgility(value: number, permanent: boolean): void;
    setAnimation(whichAnimation: string | number): void;
    setAnimationWithRarity(whichAnimation: string, rarity: raritycontrol): void;
    setAttackCooldown(cooldown: number, weaponIndex: number): void;
    setBaseDamage(baseDamage: number, weaponIndex: number): void;
    setBlendTime(timeScale: number): void;
    setConstructionProgress(constructionPercentage: number): void;
    setCreepGuard(creepGuard: boolean): void;
    setDiceNumber(diceNumber: number, weaponIndex: number): void;
    setDiceSides(diceSides: number, weaponIndex: number): void;
    setExperience(newXpVal: number, showEyeCandy: boolean): void;
    setExploded(exploded: boolean): void;
    setFacingEx(facingAngle: Angle): void;
    setField(field: unitbooleanfield | unitintegerfield | unitrealfield | unitstringfield, value: boolean | number | string): boolean;
    setWeaponField(field: unitweaponbooleanfield | unitweaponintegerfield | unitweaponrealfield | unitweaponstringfield, index: number, value: boolean | number | string): boolean;
    setflyHeight(value: number, rate: number): void;
    setHeroLevel(level: number, showEyeCandy: boolean): void;
    setIntelligence(value: number, permanent: boolean): void;
    setItemTypeSlots(slots: number): void;
    setOwner(whichPlayer: MapPlayer, changeColor: boolean): void;
    setPathing(flag: boolean): void;
    setPosition(pos: Vec2): void;
    setRescuable(byWhichPlayer: MapPlayer, flag: boolean): void;
    setRescueRange(range: number): void;
    setScale(scaleX: number, scaleY: number, scaleZ: number): void;
    setState(whichUnitState: unitstate, newVal: number): void;
    setStrength(value: number, permanent: boolean): void;
    setTimeScale(timeScale: number): void;
    setUnitAttackCooldown(cooldown: number, weaponIndex: number): void;
    setUnitTypeSlots(slots: number): void;
    setUpgradeProgress(upgradePercentage: number): void;
    setUseAltIcon(flag: boolean): void;
    setUseFood(useFood: boolean): void;
    setVertexColor(red: number, green: number, blue: number, alpha: number): void;
    shareVision(whichPlayer: MapPlayer, share: boolean): void;
    showTeamGlow(show: boolean): void;
    startAbilityCooldown(abilId: AbilId, cooldown: number): void;
    stripLevels(howManyLevels: number): boolean;
    suspendDecay(suspend: boolean): void;
    suspendExperience(flag: boolean): void;
    useItem(whichItem: Item): boolean;
    useItemAt(whichItem: Item, pos: Vec2): boolean;
    useItemTarget(whichItem: Item, target: Widget): boolean;
    wakeUp(): void;
    set waygateDestination(pos: Vec2);
    get waygateDestination(): Vec2;
    static foodMadeByType(unitId: UnitId): number;
    static foodUsedByType(unitId: UnitId): number;
    static fromEvent(): Unit;
    static fromHandle(handle: unit): Unit;
    static getPointValueByType(unitType: number): number;
    static isUnitIdHero(unitId: UnitId): boolean;
    static isUnitIdType(unitId: UnitId, whichUnitType: unittype): boolean;
    static get eventTriggering(): Unit;
    static get eventAttacker(): Unit;
    static get eventRescuer(): Unit;
    static get eventDying(): Unit;
    static get eventKilling(): Unit | undefined;
    static get eventDecaying(): Unit;
    static get eventDetected(): Unit;
    static get eventConstructingStructure(): Unit;
    static get eventCanceledStructure(): Unit;
    static get eventConstructedStructure(): Unit;
    static get eventTrained(): Unit;
    static get eventResearcher(): Unit;
    static get eventOrdered(): Unit;
    static get eventOrderTarget(): Unit;
    static get eventHeroLeveling(): Unit;
    static get eventHeroLearning(): Unit;
    static get eventHeroRevivable(): Unit;
    static get eventHeroReviving(): Unit;
    static get eventSummoner(): Unit;
    static get eventSummoned(): Unit;
    static get eventManipulating(): Unit;
    static get eventLoaded(): Unit;
    static get eventTransport(): Unit;
    static get eventSold(): Unit;
    static get eventSeller(): Unit;
    static get eventOwnershipChanging(): Unit;
    static get eventBuyer(): Unit;
    static get eventCaster(): Unit;
    static get eventEnteringRegion(): Unit;
    static get eventLeavingRegion(): Unit;
    static get filterUnit(): Unit;
}
export declare namespace Unit {
    enum ReplaceState {
        Relative = 0,
        Absolute = 1,
        Default = 2,
        Maximum = 3
    }
    namespace ReplaceState {
        function toValue(state: ReplaceState): number;
    }
}
