/** @noSelfInFile **/
/// <reference types="war3-types/core/common" />
import { Handle } from './handle';
import { Point } from './point';
export declare class Camera {
    private constructor();
    static set visible(flag: boolean);
    static get visible(): boolean;
    static get boundMinX(): number;
    static get boundMinY(): number;
    static get boundMaxX(): number;
    static get boundMaxY(): number;
    static get targetX(): number;
    static get targetY(): number;
    static get targetZ(): number;
    static get eyeX(): number;
    static get eyeY(): number;
    static get eyeZ(): number;
    static get eyePoint(): location;
    static get targetPoint(): Point;
    static adjustField(whichField: camerafield, offset: number, duration: number): void;
    static endCinematicScene(): void;
    static forceCinematicSubtitles(flag: boolean): void;
    static getMargin(whichMargin: number): number;
    static pan(x: number, y: number, zOffsetDest: number | undefined): void;
    static panTimed(x: number, y: number, duration: number, zOffsetDest: number | undefined): void;
    static reset(duration: number): void;
    static setBounds(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number): void;
    static setCameraOrientController(whichUnit: unit, xOffset: number, yOffset: number): void;
    static setCineFilterBlendMode(whichMode: blendmode): void;
    static setCineFilterDuration(duration: number): void;
    static setCineFilterEndColor(red: number, green: number, blue: number, alpha: number): void;
    static setCineFilterEndUV(minU: number, minV: number, maxU: number, maxV: number): void;
    static setCineFilterStartColor(red: number, green: number, blue: number, alpha: number): void;
    static setCineFilterStartUV(minU: number, minV: number, maxU: number, maxV: number): void;
    static setCineFilterTexMapFlags(whichFlags: texmapflags): void;
    static setCineFilterTexture(fileName: string): void;
    static setCinematicAudio(cinematicAudio: boolean): void;
    static setCinematicCamera(cameraModelFile: string): void;
    static SetCinematicScene(portraitUnitId: number, color: playercolor, speakerTitle: string, text: string, sceneDuration: number, voiceoverDuration: number): void;
    static setDepthOfFieldScale(scale: number): void;
    static setField(whichField: camerafield, value: number, duration: number): void;
    static setFocalDistance(distance: number): void;
    static setPos(x: number, y: number): void;
    static setRotateMode(x: number, y: number, radiansToSweep: number, duration: number): void;
    static setSmoothingFactor(factor: number): void;
    static setSourceNoise(mag: number, velocity: number, vertOnly?: boolean): void;
    static setTargetController(whichUnit: unit, xOffset: number, yOffset: number, inheritOrientation: boolean): void;
    static setTargetNoise(mag: number, velocity: number, vertOnly?: boolean): void;
    static stop(): void;
}
export declare class CameraSetup extends Handle<camerasetup> {
    constructor();
    get destPoint(): location;
    get destX(): number;
    set destX(x: number);
    get destY(): number;
    set destY(y: number);
    set label(label: string);
    get label(): string;
    apply(doPan: boolean, panTimed: boolean): void;
    applyForceDuration(doPan: boolean, forceDuration: number): void;
    applyForceDurationSmooth(doPan: boolean, forcedDuration: number, easeInDuration: number, easeOutDuration: number, smoothFactor: number): void;
    applyForceDurationZ(zDestOffset: number, forceDuration: number): void;
    applyZ(zDestOffset: number): void;
    getField(whichField: camerafield): number;
    setDestPos(x: number, y: number, duration: number): void;
    setField(whichField: camerafield, value: number, duration: number): void;
    static fromHandle(handle: camerasetup): camerasetup;
}
